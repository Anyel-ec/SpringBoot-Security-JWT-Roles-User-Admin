# Tiempo máximo en milisegundos que el pool esperará para obtener una conexión disponible antes de lanzar una excepción
spring.datasource.hikari.connectionTimeout=30000 # 30 segundos

# Tiempo máximo en milisegundos que una conexión puede estar inactiva en el pool antes de ser eliminada
spring.datasource.hikari.idleTimeout=600000 # 10 minutos

# Tiempo máximo en milisegundos que una conexión puede estar viva en el pool antes de ser reemplazada
spring.datasource.hikari.maxLifetime=1800000 # 30 minutos

# Número máximo de conexiones que el pool puede mantener en cualquier momento
spring.datasource.hikari.maximum-pool-size=5

# Número mínimo de conexiones inactivas que el pool debe mantener
spring.datasource.hikari.minimum-idle=5

# Controla si el modo de autocommit está habilitado en las conexiones
spring.datasource.hikari.auto-commit=true

# Nombre del pool de conexiones, útil para identificar en los registros y herramientas de monitoreo
spring.datasource.hikari.pool-name=MyPool

# Tiempo máximo en milisegundos para detectar una fuga de conexión, es decir, una conexión que no se devuelve al pool
spring.datasource.hikari.leak-detection-threshold=0 # Desactivado por defecto

# Consulta SQL para probar si una conexión es válida antes de ser utilizada
spring.datasource.hikari.connection-test-query=SELECT 1

# Tiempo máximo en milisegundos para la validación de una conexión, si supera este tiempo, se considera inválida
spring.datasource.hikari.validation-timeout=5000 # 5 segundos

# Tiempo máximo en milisegundos para la inicialización del pool de conexiones; si se supera, la inicialización falla
spring.datasource.hikari.initializationFailTimeout=1 # Fallará inmediatamente si no puede inicializar

# Si se establece en true, HikariCP registrará sus MBeans en el servidor de aplicaciones para permitir el monitoreo a través de JMX
spring.datasource.hikari.registerMbeans=false

# Si se establece en true, las consultas internas del pool se ejecutan en un hilo separado, evitando interferencia con las consultas de la aplicación
spring.datasource.hikari.isolateInternalQueries=false
